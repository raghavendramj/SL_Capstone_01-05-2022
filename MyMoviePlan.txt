MyMoviePlan .

DESCRIPTION

Create a dynamic and responsive web application for booking movie tickets online for different genres and languages.

Background of the problem statement:
NMS Cinemas is a chain of single screen theatres that screen movie shows of different genres and languages at very genuine prices. It was established in 2004 in Pune, India. Recently, the business analysts noticed a decline in sales since 2010. They found out that the online booking of movie tickets from apps, such as BookMyShow and Paytm were gaining more profit by eliminating middlemen from the equation. As a result, the team decided to hire a Full Stack developer to develop an online movie ticket booking web application with a rich and user-friendly interface.
You are hired as the Full Stack Java developer and are asked to develop the web application. The management team has provided you with the requirements and their business model so that you can easily arrange different components of the application.

Database Tables
	-> User
			id, firstName, lastName, phone, address, email, username, password
	-> MovieTicket
			id, movieId, name, showDate, showTime, location, noOfSeats, seatNos<ArrayOfSeats>, price, img(optional)
	-> Movie
			id, name, title, info, genre
	-> PurchaseCart
			id, movieId, ticket_id, finalPrice



Features of the application:

Endpoints Exposed :- 

Registration 			
Login 						
Payment gateway	-> /user
Searching
Filtering
Sorting
Dynamic data
Responsive and compatible with different devices

Admin Portal:
It deals with all the backend data generation and product information. The admin user should be able to:
	Add or remove different genres to or from the application to build a rich product line
	Edit movie details like name, ticket price, language, description, and show timings to keep it aligned to the current prices
	Enable or disable the movie shows from the application
	-> POST 		-> 	/add/genre + RequestBody -> Genre
	-> DELETE 	-> 	/remove/genre/{id}
	-> PUT 		-> 	/edit + RequestBody -> Movie  
	-> PUT 		-> 	/enable/{flag}/{id}
	
User Portal:
	It deals with the user activities. The end-user should be able to:

	Sign-in to the application to maintain a record of activities
		-> POST -> /user/register + @RequestBody -> firstName, lastName, phone, address, email, username, password
		-> POST -> /user/login + @RequestBody -> username, password

	Search for movie tickets based on the search keyword
		-> GET -> /user/search/movie/id -> Movie
		-> GET -> /user/search/keyword -> List<Movie>
		-> GET -> /user/search/movie/name -> Movie
	Apply filters and sort results based on different genres
		-> UI Operation -> AG-Grid/Angular tables
	Add all the selected movie tickets to a cart and customize the purchase at the end
		-> POST -> /user/movie/tickets/ + @RequestBody -> name, showDate, showTime, location, noOfSeats, seatNos<ArrayOfSeats> -> ticket 


Experience a seamless payment process
	-> /user/payment/{ticket_id}
Receive a booking summary page once the payment is complete
	-> /user/ticket/{ticket_id}
